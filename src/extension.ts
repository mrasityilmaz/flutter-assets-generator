// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below

import * as fs from 'fs';
import * as path from 'path';
import * as vscode from 'vscode';


function listFilesAndFoldersInAssets(assetsPath: string): string[] {
	try {

		var listOfAssets: string[] = [];

		const entries = fs.readdirSync(assetsPath, { withFileTypes: true });
		const filteredEntries = entries.filter(entry => !entry.name.startsWith('.'));
		filteredEntries.forEach((entry) => {
			const entryPath = path.join(assetsPath, entry.name);
			if (entry.isDirectory()) {
				const list = listFilesAndFoldersInAssets(entryPath);
				listOfAssets.push(...list);
			} else if (entry.isFile()) {
				listOfAssets.push(entryPath);
			}
		});

		return listOfAssets;
	} catch (error) {
		vscode.window.showWarningMessage(`Something went wrong while reading assets folder`);

		return [];
	}
}

function convertToCustomFileName(fileName: string): string {

	let lowercaseFileName = fileName;
	const turkishChars = "çÇğĞıİöÖşŞüÜ";
	const latinChars = "cCgGiIoOsSuU";


	for (let i = 0; i < turkishChars.length; i++) {
		const regex = new RegExp(turkishChars[i], "g");
		lowercaseFileName = lowercaseFileName.replace(regex, latinChars[i]);
	}
	lowercaseFileName = lowercaseFileName.replace(/[^a-zA-Z0-9]/g, '_').trim().split('_').map((word, index) => {

		if (index !== 0 && word.length > 0) {

			return '_' + word.toLowerCase();
		}
		else if (word.length === 0) {
			return '';
		}
		else {
			return word.toLowerCase();
		}
	}).join('');
	return lowercaseFileName;
}


function generateAssetsFile(listOfAssets: string[]) {

	const workspaceFolders = vscode.workspace.workspaceFolders;

	if (!workspaceFolders) {
		vscode.window.showWarningMessage('Any workspace folder is not open.');
	} else {
		workspaceFolders.forEach((folder) => {

			try {

				const libFolder = path.join(folder.uri.fsPath, 'lib');
				const assetsFilePath = path.join(libFolder, 'assets.dart');



				// assets.dart dosyasını oluştur
				let assetsFileContent = `// GENERATED CODE - DO WHATEVER YOU WANT WITH IT\n// **************************************************************************\n// Total assets: ${listOfAssets.length}\n// Generated by flutter_assets_generator extension for VS Code\n// @mrasityilmaz\n// **************************************************************************\n\n\n`;

				assetsFileContent += 'class Assets {\n\n';

				listOfAssets.forEach((asset) => {
					const relativePath = path.relative(libFolder, asset);
					const assetName = path.basename(relativePath);
					const assetPath = asset.substring(asset.indexOf('assets'));

					assetsFileContent += (`\tstatic const String ${convertToCustomFileName(assetName)} = '${assetPath}';\n\n`);
				});

				assetsFileContent += '}\n';

				fs.writeFileSync(assetsFilePath, assetsFileContent, 'utf8',);

				const assetsFileAlreadyExists = fs.existsSync(assetsFilePath) ? 'updated' : 'created';
				vscode.window.showInformationMessage(`lib/assets.dart file ${assetsFileAlreadyExists} successfully.`,);


			} catch (error) {
				vscode.window.showErrorMessage(`Error creating assets.dart`);
			}

		});
	}


}





// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {


	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('Congratulations, your extension "flutter-assets-generator" is now active!');







	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json
	let disposable = vscode.commands.registerCommand('flutter-assets-generator.GenerateAssets', () => {




		generateAssetsFile(initFunction());



	});

	context.subscriptions.push(disposable);
}




function initFunction() {

	// Workspace klasörlerini al
	const workspaceFolders = vscode.workspace.workspaceFolders;


	var listOfAssets: string[] = [];

	if (!workspaceFolders) {
		vscode.window.showWarningMessage('Any workspace folder is not open.');
		return [];
	} else {
		workspaceFolders.forEach((folder) => {




			const assetsPath = path.join(folder.uri.fsPath, 'assets');

			try {
				const assetsStats = fs.statSync(assetsPath);
				if (assetsStats.isDirectory()) {

					listOfAssets.push(...listFilesAndFoldersInAssets(assetsPath));

				} else {
					vscode.window.showWarningMessage('Not found assets folder.');
				}
			} catch (error) {
				vscode.window.showWarningMessage(`Something went wrong while reading assets folder`);
			}
		});


		return listOfAssets;

	}
}

// This method is called when your extension is deactivated
export function deactivate() { }
